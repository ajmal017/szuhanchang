#projects
  %h1.pagination-centered Projects

  %blockquote All projects are solo unless noted otherwise.

  .navbar
    .navbar-inner
      %ul.nav
        %li.brand
          %i.icon-link
        %li
          %a(href="#web") Web Apps
        %li
          %a(href="#mobile") Mobile Apps
        %li
          %a(href="#open") Open Source
        %li
          %a(href="#content") Content Sites
        %li
          %a(href="#trading") Algo Trading

  / Webapps
  %a{:name => "web"}
  %h3.pagination-centered Web Applications

  .project_container
    .row
      .span8
        %h4 OneRyng
    .row
      .span3
        %a(href="https://www.oneryng.com") oneryng.com
        %br
        %img(src="/images/oneryng.png")
        %ul
          %li Ruby on Rails 3.2.11
          %li Postgres 9.2
          %li Git
          %li SSL
          %li Stripe for payment processing
          %li Mandrill for email
          %li PPTP VPN
          %li L2TP/IPSec VPN
          %li Sensu for monitoring
        %a.btn(href="https://www.oneryng.com") Visit Site

      .span5
        %p
          %em 
            %strong Background
          %br
          OneRyng is a VPN service that allows users to surf the web quickly and privately.
        %p
          OneRyng currently provides both PPTP and L2TP/IPSec protocols for users with support for OpenVPN coming soon. It is integrated with Stripe for payment processing.
        %p
          %em 
            %strong Technology
          %br
          Stripe callbacks are used to determine when to perform particular events such as sending out welcome emails, setting up new username/password combinations, provisioning new VPN servers, etc. 
        %p
          Currently shell scripts are used to automate new user creation as well as VPN server provisioning but Chef or Puppet will be considered in the future for server provisioning.
        %p
          VPN servers are monitored using 
          %a(href="https://github.com/sensu/sensu") Sensu
          since it allows dynamic discovery of new nodes. Nagios requires that a static environment to perform monitoring, which is not feasible for my production setup because a new VPN server may be provisioned automatically at any time.

  .project_container
    .row
      .span8
        %h4 
          BitXF
          %small cofounder
    .row
      .span3
        %a(href="http://www.bitxf.com") bitxf.com
        %br
        %img(src="/images/bitxf.png")
        %br
        %a.btn(href="https://www.bitxf.com") Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          BitXF is a Bitcoin marketplace created to serve the Chinese demographic. It accepts deposits and withdrawals from Taobao and Alipay, the eBay and Paypal of China.
        %p
          Security is a huge concern for BitXF, which is why the vast majority of Bitcoins are held in cold storage (offline).
        %p
          %em
            %strong Technology
          %br
          Although I don't believe in security through obscurity, my cofounder and I would still prefer to keep the implementation details of BitXF private to add an extra layer of protection.
        %p
          Please ask in-person for more details.


  .project_container
    .row
      .span8
        %h4 Private Blog Network
    .row
      .span3
        (private url)
        %br
        %img(src="/images/pbn.png")
        %ul
          %li Ruby on Rails 3.2.11
          %li PostgreSQL 9.2
          %li Devise
          %li ActiveAdmin
          %li Git
          %li SEOMoz API
          %li WordPress XMLRPC API
      .span5
        %p
          %em 
            %strong Background
          %br
          I created a private blog network to administer a collection of WordPress blogs for a select group of trusted members.
        %p
          I developed a credit system that maintains fairness in the network by rewarding users with credits for posting content and performing manual review while requiring credits to post content.
        %p
          %em
            %strong Technology
          %br
          The PBN uses the WordPress XMLRPC API to post articles to specified blogs after strict manual review by multiple network members. It also uses the SEOMoz API to retrieve domain information to automatically calculate the value of sites entered into the network for further manual review.
        %p
          Devise provides the user authentication functionality and ActiveAdmin provides a convenient interface for administering the sites and performing manual reviews.

  .project_container
    .row
      .span8
        %h4 Koba
    .row
      .span3
        (private url)
        %br
        %img(src="/images/koba.png")
        %ul
          %li Ruby 1.9.3
          %li Python 2.7
          %li Sinatra
          %li Rails 3.2.11
          %li PostgreSQL 9.1
          %li Redis
          %li WebSockets
          %li 
            %a(href="http://sidekiq.org") Sidekiq
          %li 
            %a(href="http://scrapy.org") Scrapy
          %li 
            %a(href="http://webd.is") Webdis
          %li 
            %a(href="https://github.com/javan/whenever") Whenever
          %li Git (with submodules)
          %li SEOMoz API
          %li Whois
      .span5
        %p 
          %em 
            %strong Background
          %br
          Koba is the codename for an internal tool I developed in Ruby and Python for crawling the web in order to find valuable domains that have already expired. It connects with a variety of APIs, including SEOMoz, AHrefs.com, and various WHOIS services to obtain the data required for automating calculation of estimated domain value.
        %p
          %em 
            %strong Technology
          %br
          The system is designed as a state machine, and each candidate domain moves between various states: when they are identified by the web crawler, data is being pulled, value is being calculated, spam is being filtered, etc.
        %p
          Each state is represented by a key in Redis, with the value being a set of the domain names currently in that state.
        %p
          Both AOF and RDB persistence methods are used in Redis to ensure that data is not completely lost on reboot, but I do realize that some data may be lost because of the nature of the snapshots.
        %p
          Sidekiq workers are used to queue crawl runs and domain availability checking.
        %p
          I also wrote a quick Sinatra control panel so I could see in real-time the cardinality and contents of each set of domains in each state, as well as a separate page with the discovered valuable domains to be manually evaluated and purchased. Webdis provides direct JavaScript access to Redis data which is retrieved via long-polling AJAX or WebSockets.
        %p
          The entire system was optimized so that it could run on a 1024 MB Linode VPS - this includes the web crawler.

  .project_container
    .row
      .span8
        %h4 Plethura
    .row
      .span3
        %a(href="http://www.plethura.com") plethura.com
        %br
        %img(src="/images/plethura.png")
        %ul
          %li Django 1.3
          %li SQLite
          %li Git
        %a.btn(href="http://www.plethura.com") Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          Plethura is a collection of technological tools for making writers' lives easier. Its first product is an ebook format converter which takes a manuscript and generates all the popular ebook file formats used in portable reading devices today including the Kindle, iPhone, iPad, and Android. 
        %p
          Planned future functionality includes a novel (pun intended) method for distributing ebooks that allows readers to try before buying while INCREASING conversion rates.
        %p
          To be honest, I also just wanted to try Django.
        %p
          %em 
            %strong Technology
          %br
          Plethura is built using the
          %a(href="http://www.djangoproject.com") Django
          web application development framework because of its modularity and loosely coupled design. While in the early stages, I'm using SQLite to simplify data storage but will move to PostgreSQL.

  .project_container
    .row
      .span8
        %h4 ModelMaker

    .row
      .span3
        %a(href="http://modelmaker.pillarofeden.com") modelmaker.pillarofeden.com
        %br
        %img(src="/images/modelmaker.png")
        %ul
          %li CodeIgniter 2
          %li i18n and l10n
          %li File Uploading
          %li Image Processing (GD)
          %li MySQL
          %li Selenium
          %li Git
        %a.btn(href="http://modelmaker.pillarofeden.com") Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          ModelMaker is a joint venture between myself and Zai, a former model turned model recruiter who was introduced to me by my cousin. She wanted a web application to allow aspiring Chinese models to apply directly for her model recruiting agency, since she had a lot of gigs but not enough supply to meet the demand. 
        %p
          Unfortunately my business partner has been going through a difficult time with some personal issues, including domestic violence and alcoholism so development has been postponed indefinitely while she deals with these issues. As a result the site is unfinished as you can see, and still only running on a staging server. The project has been abandoned and is now open sourced on GitHub:
          %br
          %a(href="http://github.com/hanchang/ModelMaker") http://github.com/hanchang/ModelMaker
        %p
          %em 
            %strong Technology
          %br
          %a(href="http://www.CodeIgniter.com") CodeIgniter
          was the PHP MVC framework chosen for this application because of my previous familiarity (see below). Internationalization was required due to the multilingual nature of the site. Selenium tests were underway for quality assurance, and a continuous integration process was in development.

  .project_container
    .row
      .span8
        %h4 
          Fuel For Hire
          %small cofounder

    .row
      .span3
        %a{:href => "http://www.fuelforhire.com"} fuelforhire.com
        %br
        %img(src="/images/fuelforhire.png")
        %ul
          %li CodeIgniter
          %li MySQL
          %li Subversion
          %li Distributed Team
        %a.btn{:href => "http://www.fuelforhire.com"} Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          Fuel For Hire was created when two of my college buddies were looking for jobs during senior year. I was still a junior at that time but kept hearing them talk about how difficult it was to tell which companies were good to work for. We decided to make a website where people could share their interview and employment experiences so that applicants could get a better idea of who they would be working for.
        %p
          %em 
            %strong Technology
          %br
          The site was made in
          %a(href="http://www.codeigniter.com") CodeIgniter
          , a rapid development PHP MVC framework. All the HTML/CSS was done by hand; no templating system was used. MySQL was the database used via CodeIgniter's ActiveRecord class. We had a Subversion repository from the start to help with collaboration.
        %p
          %em 
            %strong Methodology
          %br
          We were a very democratic group; all decisions made had to be unanimous, but unfortunately we found out that this meant that decisions took a long time to come to a conclusion. After they graduated, my cofounders and I continued work on the site remotely with weekly status meetings. Approximately half of the site was created in this fashion. We decided to call it quits about a year later after it was clear that our venture capital backed competitor
          %a{:href => "http://www.glassdoor.com", :rel => "nofollow"} Glassdoor
          had dominated the market.

  %hr

  / Mobile
  %a{:name => "mobile"}
  %h3.pagination-centered Mobile Application Development

  .project_container
    .row
      .span8
        %h4 Medical Abbreviations (iOS)
    .row
      .span3
        %img(src="/images/NexusMedicalAbbreviations.png")
      .span5
        %p The idea for this app was given by my friend Kevin Lai who works as a pharmacist. The app development was completely done by myself; from start to finish it took one week without any prior iPhone development experience.
        %p
          %a{:href => "http://www.admob.com"} Admob
          provides the advertisements for monetization. Icons were designed by Kevin's cousin. This project is pending submission to the App Store via Kevin's holding company, Nexus Medical Solutions, LLC. I'll update with an App Store link when it is accepted.
        %p
          %br
          %a.btn{:href => "http://www.nexusmedicalsolutions.com/products/medicalabbreviations"} 
            Medical Abbreviations Website

  %hr

  / Open Source 
  %a{:name => "open"}
  %h3.pagination-centered Open Source Contributions

  .project_container
    .row
      .span8
        %h4 
          %a(href="http://www.friarframework.com") Friar Framework (Android)
    .row
      .span3
        %img(src="/images/friar-robot.png")
      .span5
        %p The Friar Framework is an Android framework for creating mobile application versions of ebooks.
        %p
          I wanted to publish ebook mobile app versions of my
          %a{:href => "http://www.programminginterview.com"} programminginterview.com
          website content on both iOS and Android but only found a framework for iOS. As a result, I ported the
          %a{:href => "http://www.bakerframework.com"} Baker Framework
          over to Android and called it Friar.
        %p
          %a.btn{:href => "http://www.friarframework.com"} Friar Framework Website
 
  .project_container
    .row
      .span8
        %h4
          %a(href="http://www.mozilla.org") Mozilla (Desktop)
    .row
      .span3
        %img(src="/images/mozilla_logo.png")
      .span5
        %p 
          I am a Mozilla contributor who believes in open source and enjoys donating my occasional spare time to fix bugs in Firefox. To see a list of all the bugs I've contributed to so far, check out:
          %a{:href => "http://www.szuhanchang.com/mozilla"} http://www.szuhanchang.com/mozilla
        %p Find me on Mozilla's #introduction IRC channel, I'm frequently there!
 
  .project_container
    .row
      .span8
        %h4 
          %a(href="http://www.horde.org") Horde Framework
    .row
      .span3
        %img(src="/images/horde3.png")
      .span5
        %p 
          During the summer between my freshman and sophomore years, I applied and entered the Google Summer of Code program, earning a $7500 grant to work on the Sedule Project, a module in the Horde Framework to help managers create and edit schedules for employee shifts based on their availability. 
        %p 
          %a(href="http://wiki.horde.org/Project/Sedule") wiki.horde.org/project/sedule

  %hr

  / Content Sites
  %a{:name => "content"}
  %h3.pagination-centered Content Sites

  .project_container
    .row
      .span8
        %h4 Worldly Travelers Guide
    .row
      .span3
        %a{:href => "http://www.worldlytravelersguide.com"} worldlytravelersguide.com
        %a{:href => "http://www.xiazouke.com"} xiazouke.com (中文)
        %br
        %img(src="/images/worldlytravelersguide.png")
        %ul
          %li WordPress
          %li nginx reverse proxy
        %a.btn{:href => "http://www.worldlytravelersguide.com"} Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          My girlfriend and I are avid travelers; she's compiled a website with detailed itinerary information about our travel destinations for other people to help plan their vacations. There is an English version as well as a Chinese version.
        %p
          %em 
            %strong Technology
          %br
            Since the WordPress shared host server is in Texas, I use nginx on a VPS located in California as a transparent reverse proxy to serve the Chinese site in order to help reduce latency and page load time. This has resulted in dramatic loading time improvements, from a pathetic 28s load time to just under 10s through a Chinese internet connection for a 180% speedup.

  .project_container
    .row
      .span8
        %h4 Snowboards for Women
    .row
      .span3
        %a{:href => "http://www.snowboardsforwomen.com"} snowboardsforwomen.com
        %br
        %img(src="/images/snowboardsforwomen.png")
        %ul
          %li CodeIgniter
          %li MySQL
          %li Beautiful Soup
          %li Shell Scripting
          %li Cron
          %li Regular Expressions
          %li SEO
        %a.btn{:href => "http://www.snowboardsforwomen.com"} Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          Snowboards for Women was created because I love snowboarding and wanted my to help my then girlfriend choose a snowboard so she could come with me on trips. It was difficult to find a women's snowboard so I used
          %a{:href => "http://www.crummy.com/software/BeautifulSoup/"} Beautiful Soup,
          a Python HTML parser, to scrape the outdoor retailer websites for women's boards. I later found out that each merchant had datafeeds with affiliate links so I switched to that, created a website, and after learning and implementing SEO the site makes me a healthy amount of passive income every winter.
        %p
          %em 
            %strong Technology
          %br
          Originally the site was just a list of women's snowboards and their links scraped using Beautiful Soup and some regular expressions for personal use. I've since grown it to be a CodeIgniter web application with bash scripts that fetch datafeeds and parse them automatically to keep prices current via cron jobs.
        %p
          There is also email marketing integration through,
          %a{:href => "http://www.mailchimp.com"} Mailchimp
          with a custom written
          %a{:href => "http://www.snowboardsforwomen.com/recommend"} snowboard recommendation engine
          that evaluates a user's snowboarding preferences and automatically sends a delayed email containing recommendations suitable for their style and body shape.

  .project_container
    .row
      .span8
        %h4 Trekking Poles Pro 
    .row
      .span3
        %a{:href => "http://www.trekkingpolespro.com"} trekkingpolespro.com
        %br
        %img(src="/images/trekkingpolesguide.png")
        %ul
          %li CodeIgniter
          %li MySQL
          %li Data Feed Parsing
          %li Shell Scripting
          %li Cron
          %li Regular Expressions
          %li SEO
          %li Responsive Layout
          %li Mercurial
        %a.btn{:href => "http://www.trekkingpolespro.com"} Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          Since the Snowboards for Women business model was so successful, I wanted to duplicate it in other markets as well. As a result, I completely rewrote the framework to build Trekking Poles Guide, which does not have the seasonal problem that Snowboards For Women suffers from. This framework is modular enough to be used for virtually any price comparison / review aggregation site, and I plan on using this framework to build a new outdoor gear review site every month.
        %p
          %em 
            %strong Technology
          %br
          Everything has been refactored to be clean and reusable, with necessary abstractions to make it easy to generate a new product site using the framework without excessive premature optimization. The code is stored in a private Mercurial repository on
          %a{:href => "http://www.bitbucket.org"} Bitbucket.
        %p
          All of the tedious tasks such as downloading and parsing data feeds to obtain up to date prices have been automated using shell scripts run via cronjobs, so after building a site the technology portion will be pretty much hands off so I can focus on customer service and marketing.

  .project_container
    .row
      .span8
        %h4 Programming Interview
    .row
      .span3
        %a{:href => "http://www.programminginterview.com"} programminginterview.com
        %br
        %img(src="/images/programminginterview.png")
        %ul
          %li Drupal
          %li MySQL
          %li SEO
        %a.btn{:href => "http://www.programminginterview.com"} Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
          The Ultimate Guide to Programming Interviews was created when I began my job hunt after college. In preparation for the technical interviews commonly given for software developer positions, I collected many of the practice questions that I came across while reviewing. I also included my own coded answers and detailed written explanations for the solutions. Friends asked for the document which I originally kept in a Word file, but it got old emailing them updated versions so I decided to just put all the content on a website.
        %p According to Google Analytics, the Ultimate Guide to Programming Interviews consistently gets over 6000+ unique visitors per month. Every single visitor is acquired organically - I do no advertising of any sort, including word of mouth. The site is ranked #1 or #2 for the keywords "programming interview" and "programming interviews" and has a Google PageRank of 5.
        %p
          %em 
            %strong Technology
          %br
          The site was developed using
          %a{:href => "http://www.drupal.org"} Drupal.
          All interview answers, both code and explanations, were written by myself with the exception of errata credits given on the Contribute page.

  .project_container
    .row
      .span8
        %h4 szuhanchang.com
    .row
      .span3
        %a{:href => "http://www.szuhanchang.com"} szuhanchang.com
        %br
        %img(src="/images/szuhanchang.png")
        %ul
          %li Sinatra
          %li Haml
          %li Responsive Layout
          %li nginx reverse proxy
        %a.btn{:href => "http://www.szuhanchang.com"} Visit Site
      .span5
        %p
          %em 
            %strong Background
          %br
            This is the site you're looking at right now! I needed a nice professional portfolio to show off my cool projects and work experience, so here we are.
            (Yes, my favicon is a unicorn.)
        %p
          %em 
            %strong Technology
          %br
            The site was created using Sinatra and Haml and deployed on Heroku. However, I had some issues with the fact that the single Heroku dyno would idle and 
            take a long time to boot when someone requested the site for the first time. 
        %p
          As a result, I experimented with using nginx as a transparent reverse proxy 
          to cache the site contents and serve them directly as static pages from nginx. This worked well until I realized I had a ton of coursework that was only
          hosted on my shared host and my VPS didn't have enough disk space to handle it so I wrote a script to wget mirror the Heroku site onto my shared host as
          a deployment script. Now the site sits on nginx on my shared host served directly as HTML files.


  %hr

  / Trading
  %a{:name => "trading"}
  %h3.pagination-centered Algorithmic Trading

  %h4 
    Algorithmic Trading Backtesting Framework and Strategy Development
    %small cofounder
  %img.img-polaroid.pull-right(src="/images/bloomberg-terminal.jpg" width='280')
  %ul
    %li Java JDK 1.6
    %li JUnit
    %li JDIC
    %li Eclipse
    %li Subversion
    %li Jenkins
    %li Interactive Brokers API
    %li DokuWiki
    %li RedMine bug tracking
    %li Distributed Team
  %p
    %em 
      %strong Background
    %br
    Since I used to work at Lime Brokerage, a high volume, high throughput brokerage whose clients were all professional black box algorithmic traders, I really got into automated trading myself. Unfortunately, company policy prevented employees from doing any automated trading but I used my time there to learn a lot about the financial markets.
  %p After leaving Lime, I found some likeminded people including previous coworkers who had also left the company and we started a project to develop and backtest trading strategies. Originally we were going to use off-the-shelf software like Amibroker or WealthLab but quickly determined that these solutions were insufficient to do any serious, minimal latency, high volume day trading, so we decided to write our own backtesting framework.
  %p
    %em  
      %strong Technology
    %br
    The backtesting trading framework is written in Java.
    %a{:href => "https://jdic.dev.java.net/"} JDIC (Java Desktop Integration Components)
    and Swing provide a GUI for visual analysis of historic strategy performance.
    %a{:href => "http://www.junit.org"} JUnit
    serves as the unit testing framework.
    %a{:href => "http://subversion.tigris.org"} Subversion
    is our source control and it is coupled with
    %a{:href => "http://jenkins-ci.org"} Jenkins
    (previously Hudson) for continuous integration. A post commit hook was created so we get email alerts whenever a build is broken or fixed. Forward testing of strategies is done through a PaperTrading account at
    %a{:href => "http://www.interactivebrokers.com"} Interactive Brokers
    through their Trader Workstation (TWS) Java API using custom wrapper classes. Bug tracking is done via RedMine.
  %p
    %em 
      %strong Methodology
    %br
    Our team of six is geographically distributed throughout Boston, San Francisco, and Shanghai. We collaborate mostly through email because it is asynchronous but hold Skype conferences to brainstorm and make important group decisions. Otherwise, work is done remotely on our own time schedules, since different people may have different busy periods. Every team member has various specialties (mine are system administration, strategy development, and Interactive Brokers API integration) but anyone can work on any part of the system.
  %p
    We share information about infrastructure, including logins and such using
    %a{:href => "http://www.dokuwiki.org"} DokuWiki.
    Decisions are made by prototyping instead of debating; whoever has the best prototype moves forward with their design, and consensus is always reached quickly as a result of the quality of the prototype. We are agile and loosely coupled, so nobody needs to wait on another's progress to continue forward. There are legal structures in place to prevent any IP problems, but as a result I am unable to share further details regarding this project, especially code.

